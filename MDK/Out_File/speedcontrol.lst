C51 COMPILER V9.60.0.0   SPEEDCONTROL                                                      09/29/2020 14:48:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SPEEDCONTROL
OBJECT MODULE PLACED IN .\Out_File\speedcontrol.obj
COMPILER INVOKED BY: D:\keil_v5\C51\BIN\C51.EXE ..\Libraries\Control\speedcontrol.c LARGE OPTIMIZE(8,SPEED) BROWSE MODP2
                    - INCDIR(..\Libraries\libraries;..\Libraries\seekfree_libraries;..\Libraries\seekfree_peripheral;..\USER\inc;..\USER\src;
                    -..\Libraries\Control) DEBUG OBJECTEXTEND PRINT(.\Out_File\speedcontrol.lst) TABS(2) OBJECT(.\Out_File\speedcontrol.obj)

line level    source

   1          #include "headfile.h"
   2          
   3          int8 m,num,pe,pec; 
   4          //float fe;             //电磁偏差值，3种计算方式，都试试
   5          //float fec;            //电磁偏差的微分
   6          int16 speed_now;      //编码器读取的速度
   7          
   8          float eFuzzy[2] = {0,0}; 
   9          float ecFuzzy[2] = {0,0}; 
  10          
  11          float speed_fe = 0;  //将输入回来的fe变成绝对值，赋值进speed_fe
  12          float speed_fec = 0; //将输入回来的fec变成绝对值，赋值进speed_fec
  13          float speed_Fuzzy[6] = {0,0,0,0,0,/*末尾为0,用来查询模糊表步骤*/ 0};
  14          float speed_forecast; //预测将要达到的速度（PWM）
  15          float speed_forecast_error; //预测将要达到的速度的偏差（差速）
  16          //float speed_forecast_error_last;
  17          //float speed_forecast_error_error;
  18          int8 speed_pe,speed_pec;
  19          float speed_forecast = 0;  //预测车速
  20          
  21          //float speed_round=0;  //入环强制差速参数
  22          /*需要调节的参数*/ 
  23          //float speed_power = 1,speed_pp=1;
  24          float speed_eRule[5] = {5,8,15,18,22}; //输入误差（speed_fe）的范围                       3 9 13 18 25    
             -                      （可以理解成不同赛道元素电感的误差吗）/偏离中间导线的值
  25                                             //
  26          float speed_Rule_range[5] = {100,100,100,100,100}; //输出预测速度（speed_forecast）的范围       58;63;68  
             -                           （可以理解成不同赛道元素的预测速度吗/还是规定预测速度都是100？）
  27          float speed_error_Rule[5] = {96,95,94,88,50};  //预测速度偏差的范围                   //0 12 18  改0 10 16
             -； 30354050              （不懂....）
  28          int speed_rule[6][6] =   //速度规则表
  29          {
  30            //ec 0 1 2 3 4  //e
  31                {4,4,4,3,2,5},//0    
  32                {4,3,3,2,1,5},//1   
  33                {4,3,2,1,0,5},//2    
  34                {3,2,1,1,0,5},//3         
  35                {2,1,0,0,0,5},//4
  36                {5,5,5,5,5,5} //
  37          };
  38          /****************  以下参数为速度闭环所用，函数未测试且有重复定义，暂时不理 ************/
  39          
  40          float speed_fe_last = 0;
  41          
  42          //float speed_fe = 0;
  43          
  44          //float speed_fec = 0;
  45          
  46          float control_P;  // 输出的 P 值 和 D 值
  47          float speed_Fuzzy_kp[6] = {0,0,0,0,0,/*末尾为0,用来查询模糊表步骤*/ 0};
  48          float speed_Fuzzy_kd[6] = {0,0,0,0,0,/*末尾为0,用来查询模糊表步骤*/ 0};
  49          
  50          /*******************  需要调节的参数  ******************************************/
C51 COMPILER V9.60.0.0   SPEEDCONTROL                                                      09/29/2020 14:48:26 PAGE 2   

  51          float speed_eRule_err[5] = {-55,-35,0,35,55}; //输入误差的范围           //       20 50                   
             -(这个也不懂...具体是要如何给定数值。。)（实测值与预测值的差）
  52          
  53          float speed_Rule_kp_range[5] = {-35,-25,0,25,35};  //输出的P值的范围   2.5改为15，25；    15到25之间要大  
             -          30 20      45 60     60 80     14；16   （可以理解成不同赛道元素的p值吗？）      
  54          int speed_rule_kp[6][6]=  //p值规则表         //35 20 20 35
  55          {
  56            //ec 0 1 2 3 4  //e
  57                {4,4,4,3,2,5},//0  
  58                {4,3,3,2,1,5},//1   
  59                {4,3,2,1,0,5},//2    
  60                {3,2,1,1,0,5},//3         
  61                {2,1,0,0,0,5},//4
  62                {5,5,5,5,5,5} //
  63          };
  64          
  65          uint8 speed_error_power = 1;
  66          float DDD = 0;    //这里加了D值
  67          float D_error=0;
  68          /*******************************************************************************
  69           *  @brief      speed_fuzzy_mem_cal_forecast函数
  70           *  @note       隶属度计算函数
  71                          输出结果放在eFuzzy[]和ecfuzzy[]，等级为pe、pec
  72           *  @warning    18/3/14 代码参考binary-star队  v4.0
  73           ******************************************************************************/
  74          void speed_fuzzy_mem_cal_forecast(void)//隶属度计算
  75          {
  76   1        
  77   1          if(fe < 0) speed_fe = -fe;  //将输入回来的fe变成绝对值，赋值speed_fe
  78   1          else speed_fe = fe;
  79   1          if(fec < 0) speed_fec = -fec; //将输入回来的fe变成绝对值，赋值speed_fec
  80   1          else speed_fec = fec;
  81   1          
  82   1          
  83   1        /*-----误差隶属函数描述-----*/
  84   1          if(speed_fe < speed_eRule[0])     //用来确定隶属度            // |x_x_x_x_x_     改改改
  85   1          {
  86   2            eFuzzy[0] =1.0; 
  87   2            speed_pe= 0;          //?
  88   2          }
  89   1          else if(speed_fe < speed_eRule[1])          // _x|x_x_x_x_
  90   1          {       
  91   2            eFuzzy[0] = (speed_fe-speed_eRule[0])/(speed_eRule[1]-speed_eRule[0]);
  92   2            speed_pe = 0;
  93   2          }
  94   1          else if(speed_fe < speed_eRule[2])          // _x_x|x_x_x_
  95   1          {
  96   2            eFuzzy[0] = (speed_fe-speed_eRule[1])/(speed_eRule[2]-speed_eRule[1]);
  97   2            speed_pe =1;
  98   2          }
  99   1          else if(speed_fe < speed_eRule[3])          // _x_x_x|x_x_
 100   1          {
 101   2            eFuzzy[0] = (speed_fe-speed_eRule[2])/(speed_eRule[3]-speed_eRule[2]);
 102   2            speed_pe =2;
 103   2          }
 104   1          else if(speed_fe < speed_eRule[4])            // _x_x_x_x|x_
 105   1          {   
 106   2            eFuzzy[0] = (speed_fe-speed_eRule[3])/(speed_eRule[4]-speed_eRule[3]);
 107   2            speed_pe=3;
 108   2          } 
 109   1          else                    // _x_x_x_x_x|
 110   1          {
C51 COMPILER V9.60.0.0   SPEEDCONTROL                                                      09/29/2020 14:48:26 PAGE 3   

 111   2            eFuzzy[0] =1.0;
 112   2            speed_pe=4;
 113   2          }
 114   1          eFuzzy[1] = 1.0 - eFuzzy[0];                    //eFuzzy[0]+eFuzzy[1]=1;
 115   1      
 116   1      /**/speed_pec = 2;                          //fec一定是20？
 117   1      /**/ecFuzzy[0] = 1;
 118   1      /**/ecFuzzy[1] = 0;
 119   1            
 120   1      }
 121              
 122          
 123          /*******************************************************************************
 124           *  @brief      speed_fuzzy_query_forecast函数
 125           *  @note       查询模糊规则表，算出输出的各占比
 126                          
 127           *  @warning    18/3/14 代码参考binary-star队  v4.0
 128           ******************************************************************************/
 129          void speed_fuzzy_query_forecast(void)//查询模糊规则表
 130          {
 131   1          for(m = 0;m <= rank; m++) //清空数组以便累加
 132   1          {
 133   2              speed_Fuzzy[m] = 0;
 134   2          }
 135   1            /*查询kp模糊规则表*/  
 136   1          num = speed_rule[speed_pe][speed_pec];
 137   1          speed_Fuzzy[num] += eFuzzy[0];
 138   1          
 139   1          num = speed_rule[speed_pe+1][speed_pec];
 140   1          speed_Fuzzy[num] += eFuzzy[1];
 141   1          
 142   1      }
 143          
 144          /*******************************************************************************
 145           *  @brief      speed_fuzzy_solve_forecast函数
 146           *  @note       重心法解模糊
 147                          
 148           *  @warning    18/3/14 代码参考binary-star队 v4.0
 149           ******************************************************************************/
 150          void speed_fuzzy_solve_forecast(void)//解模糊得到pd值
 151          {
 152   1          speed_forecast = 0; //清空P和D值以便累加
 153   1          speed_forecast_error = 0;
 154   1          /*面积中心法解模糊*/
 155   1          for(m = 0;m < rank; m++)
 156   1          {
 157   2            speed_forecast += (speed_Fuzzy[m] * speed_Rule_range[m]);
 158   2            speed_forecast_error += (speed_Fuzzy[m] * speed_error_Rule[m]);
 159   2          }
 160   1          
 161   1         // if( speed_forecast > 55) speed_forecast = 55;
 162   1         // if( speed_forecast_error > 30) speed_forecast_error = 30;
 163   1         // speed_forecast = speed_power * speed_forecast*speed_pp;                           //  （？？）      
             -                                                                     
 164   1         // speed_forecast_error = speed_power * speed_forecast_error*speed_pp;
 165   1          
 166   1          
 167   1         // speed_forecast_error_error=speed_forecast_error-speed_forecast_error_last;   //差速的范围
 168   1         // speed_forecast_error_last=speed_forecast_error;
 169   1      }
 170          
 171          /*******************************************************************************
C51 COMPILER V9.60.0.0   SPEEDCONTROL                                                      09/29/2020 14:48:26 PAGE 4   

 172           *  @brief      speedcontrol_forecast函数
 173           *  @note       速度预测函数，算出预测要达到的速度的偏差，及其偏差变化率
 174                          
 175           *  @warning    18/3/14 v4.0  未测试，待定
 176           ******************************************************************************/
 177          void speedcontrol_forecast(void)
 178          {
 179   1      
 180   1        
 181   1          
 182   1          speed_fe_last = speed_fe;
 183   1          speed_fe = speed_now - speed_forecast;          //实际与预测的偏差，！！！！！！！！！！！真正的差值；
 184   1          speed_fec = speed_fe - speed_fe_last;           //实际与预测的偏差的偏差；及微分
 185   1          
 186   1         
 187   1          
 188   1          
 189   1      }
 190          
 191          
 192          //////////////////////////////////////////////////////////////////////////////////////////////////////////
 193          
 194          
 195          /*******************************************************************************
 196           *  @brief      speed_fuzzy_mem_cal函数
 197           *  @note       隶属度计算函数
 198                          输出结果放在eFuzzy[]和ecfuzzy[]，等级为pe、pec
 199           *  @warning    18/3/14 代码参考binary-star队  v4.0 未测试，待定
 200           ******************************************************************************/
 201          void speed_fuzzy_mem_cal_fe(void)//隶属度计算
 202          {
 203   1          //////////////////////////左轮//////////////////////////////////
 204   1        /*-----误差隶属函数描述-----*/
 205   1          if(speed_fe < speed_eRule_err[0])     //用来确定隶属度            // |x_x_x_x_x_
 206   1          {
 207   2            eFuzzy[0] =1.0; 
 208   2            pe= 0;          //?
 209   2          }
 210   1          else if(speed_fe < speed_eRule_err[1])          // _x|x_x_x_x_
 211   1          {       
 212   2            eFuzzy[0] = (speed_fe-speed_eRule_err[0]) / (speed_eRule_err[1]-speed_eRule_err[0]);
 213   2            pe = 0;
 214   2          }
 215   1          else if(speed_fe < speed_eRule_err[2])          // _x_x|x_x_x_
 216   1          {
 217   2            eFuzzy[0] = (speed_fe-speed_eRule_err[1]) / (speed_eRule_err[2]-speed_eRule_err[1]);
 218   2            pe =1;
 219   2          }
 220   1          else if(speed_fe < speed_eRule_err[3])          // _x_x_x|x_x_
 221   1          {
 222   2            eFuzzy[0] = (speed_fe-speed_eRule_err[2]) / (speed_eRule_err[3]-speed_eRule_err[2]);
 223   2            pe =2;
 224   2          }
 225   1          else if(speed_fe < speed_eRule_err[4])            // _x_x_x_x|x_
 226   1          {   
 227   2            eFuzzy[0] = (speed_fe-speed_eRule_err[3]) / (speed_eRule_err[4]-speed_eRule_err[3]);
 228   2            pe=3;
 229   2          }
 230   1         
 231   1          else                    // _x_x_x_x_x|
 232   1          {
 233   2            eFuzzy[0] =1.0;
C51 COMPILER V9.60.0.0   SPEEDCONTROL                                                      09/29/2020 14:48:26 PAGE 5   

 234   2            pe=4;
 235   2          }
 236   1          eFuzzy[1] = 1.0 - eFuzzy[0];                    //eFuzzy[0]+eFuzzy[1]=1;
 237   1       
 238   1      /**/pec = 2;
 239   1      /**/ecFuzzy[0] = 1;
 240   1      /**/ecFuzzy[1] = 0;
 241   1          
 242   1         
 243   1      }
 244          
 245          /*******************************************************************************
 246           *  @brief      speed_fuzzy_query函数
 247           *  @note       查询模糊规则表，算出输出的各占比
 248                          
 249           *  @warning    18/3/14 代码参考binary-star队  v4.0 未测试，待定
 250           ******************************************************************************/
 251          void speed_fuzzy_query_fe(void)//查询模糊规则表
 252          {
 253   1          for(m = 0;m <= rank; m++) //清空数组以便累加
 254   1          {
 255   2              speed_Fuzzy_kp[m] = 0;
 256   2              speed_Fuzzy_kd[m] = 0;
 257   2          }
 258   1            /*查询kp模糊规则表*/  
 259   1          num = speed_rule_kp[pe][pec];
 260   1          speed_Fuzzy_kp[num] += eFuzzy[0]; 
 261   1          
 262   1          num = speed_rule_kp[pe+1][pec];
 263   1          speed_Fuzzy_kp[num] += eFuzzy[1];
 264   1          
 265   1      }
 266          
 267          /*******************************************************************************
 268           *  @brief      speed_fuzzy_solve函数
 269           *  @note       重心法解模糊
 270                          
 271           *  @warning    18/3/14 代码参考binary-star队 v4.0 未测试，待定
 272           ******************************************************************************/
 273          void speed_fuzzy_solve_fe(void)//解模糊得到pd值
 274          {
 275   1          control_P = 0; //清空P和D值以便累加
 276   1          //speed_D = 0;
 277   1          /*面积中心法解模糊*/
 278   1          for(m = 0;m < rank; m++)
 279   1          {
 280   2            control_P += speed_Fuzzy_kp[m] * speed_Rule_kp_range[m];
 281   2          //  speed_D += speed_Fuzzy_kd[m] * speed_Rule_kd[m];   
 282   2          }
 283   1      }
 284          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2580    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    375    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.0.0   SPEEDCONTROL                                                      09/29/2020 14:48:26 PAGE 6   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
