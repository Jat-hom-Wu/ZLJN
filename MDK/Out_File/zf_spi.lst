C51 COMPILER V9.60.0.0   ZF_SPI                                                            08/05/2020 22:00:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ZF_SPI
OBJECT MODULE PLACED IN .\Out_File\zf_spi.obj
COMPILER INVOKED BY: D:\keil_v5\C51\BIN\C51.EXE ..\Libraries\seekfree_libraries\zf_spi.c LARGE OPTIMIZE(8,SPEED) BROWSE 
                    -MODP2 INCDIR(..\Libraries\libraries;..\Libraries\seekfree_libraries;..\Libraries\seekfree_peripheral;..\USER\inc;..\USER
                    -\src;..\Libraries\Control) DEBUG OBJECTEXTEND PRINT(.\Out_File\zf_spi.lst) TABS(2) OBJECT(.\Out_File\zf_spi.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          spi
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8G2K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          #include "zf_gpio.h"
  21          #include "zf_spi.h"
  22          
  23          //--------------------------------------------------------------------------------------------------------
             ------------
  24          //  @brief      spi初始化函数(ss引脚由软件控制)
  25          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
  26          //  @param      sck_pin     选择SCK引脚
  27          //  @param      mosi_pin    选择MOSI引脚
  28          //  @param      miso_pin    选择MISO引脚
  29          //  @param      mstr        主从选择
  30          //  @param      mode        SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=1 CP
             -HA=1 
  31          //  @param      mode            0: CLK空闲时刻为低电平 在第一个CLK跳边沿 捕获数据
  32          //  @param      mode            1: CLK空闲时刻为低电平 在第二个CLK跳边沿 捕获数据
  33          //  @param      mode            2: CLK空闲时刻为高电平 在第一个CLK跳边沿 捕获数据
  34          //  @param      mode            3: CLK空闲时刻为高电平 在第二个CLK跳边沿 捕获数据 
  35          //  @param      baud        速率选择
  36          //  @since      v1.0
  37          //  Sample usage:       spi_init(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14,MASTER,SYSclk_DIV_4); 
  38          //                //初始化SPI1,主机模式,速率为系统频率/4，SCLK引脚P1.5 MOSI引脚P1.3 MISO引脚P1.4
  39          //--------------------------------------------------------------------------------------------------------
             ------------
  40          void spi_init(SPIN_enum spi_n,
  41                  SPI_PIN_enum sck_pin, 
  42                  SPI_PIN_enum mosi_pin, 
  43                  SPI_PIN_enum miso_pin, 
  44                  uint8 mode,
  45                  SPI_MSTR_enum mstr,
  46                  SPI_BAUD_enum baud)
  47          {
  48   1      
C51 COMPILER V9.60.0.0   ZF_SPI                                                            08/05/2020 22:00:18 PAGE 2   

  49   1        sck_pin = sck_pin;
  50   1        mosi_pin = mosi_pin;
  51   1        miso_pin = miso_pin;
  52   1        
  53   1      
  54   1        
  55   1      switch(spi_n)
  56   1          {
  57   2          //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
  58   2          case SPI_1:
  59   2            gpio_mode(P1_3,GPIO);
  60   2            gpio_mode(P1_4,GPIO);
  61   2            gpio_mode(P1_5,GPIO);
  62   2            gpio_pull_set(P1_3,PULLUP);
  63   2            gpio_pull_set(P1_4,NOPULL);
  64   2            gpio_pull_set(P1_5,PULLUP);
  65   2            break;
  66   2          case SPI_2:
  67   2            gpio_mode(P2_3,GPIO);
  68   2            gpio_mode(P2_4,GPIO);
  69   2            gpio_mode(P2_5,GPIO);
  70   2            gpio_pull_set(P2_3,PULLUP);
  71   2            gpio_pull_set(P2_4,NOPULL);
  72   2            gpio_pull_set(P2_5,PULLUP);
  73   2            break;
  74   2          case SPI_3:
  75   2            gpio_mode(P4_0,GPIO);
  76   2            gpio_mode(P4_1,GPIO);
  77   2            gpio_mode(P4_3,GPIO);
  78   2            gpio_pull_set(P4_0,PULLUP);
  79   2            gpio_pull_set(P4_1,NOPULL);
  80   2            gpio_pull_set(P4_3,PULLUP);
  81   2            break;
  82   2          case SPI_4:
  83   2            gpio_mode(P3_4,GPIO);
  84   2            gpio_mode(P3_3,GPIO);
  85   2            gpio_mode(P3_2,GPIO);
  86   2            gpio_pull_set(P3_4,PULLUP);
  87   2            gpio_pull_set(P3_3,NOPULL);
  88   2            gpio_pull_set(P3_2,PULLUP);
  89   2            break;
  90   2          }
  91   1        
  92   1        P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
  93   1          switch(spi_n)
  94   1          {
  95   2          case SPI_1:
  96   2              P_SW1 |= (0x00<<2);
  97   2              break;
  98   2          case SPI_2:
  99   2              P_SW1 |= (0x01<<2);
 100   2              break;
 101   2          case SPI_3:
 102   2              P_SW1 |= (0x02<<2);
 103   2              break;
 104   2          case SPI_4:
 105   2              P_SW1 |= (0x03<<2);
 106   2              break;
 107   2          }
 108   1        
 109   1        SPCTL &= 0xF3;    //清除SPI极性和相位
 110   1        switch(mode)
C51 COMPILER V9.60.0.0   ZF_SPI                                                            08/05/2020 22:00:18 PAGE 3   

 111   1        {
 112   2        case 0:
 113   2          
 114   2          break;
 115   2        case 1:
 116   2          SPCTL |= 0x01<<2;
 117   2          break;
 118   2        case 2:
 119   2          SPCTL |= 0x02<<2;
 120   2          break;
 121   2        case 3:
 122   2          SPCTL |= 0x03<<2;
 123   2          break;
 124   2        }
 125   1          
 126   1        
 127   1        SPCTL |= baud;    //速率设定
 128   1      
 129   1          if(mstr == MASTER)
 130   1          {
 131   2              SPCTL |= 1<<7;  //忽略SS引脚功能，使用MSTR确定器件是主机还是从机
 132   2              SPCTL |= 1<<4;  //主机模式
 133   2          }
 134   1          else
 135   1          {
 136   2              //不做操作
 137   2          }
 138   1          SPCTL |= 1<<6;    //使能SPI功能
 139   1      }
 140          
 141          
 142          
 143          //--------------------------------------------------------------------------------------------------------
             ------------
 144          //  @brief      SPI发送接收函数
 145          //  @param      dat           发送的数据
 146          //  @since      v1.0
 147          //  Sample usage:       buf_1 = spi_mosi(SPI_1,1,buf);    //发送buff的内容，并接收到buf_1里，长度为1字节
 148          //--------------------------------------------------------------------------------------------------------
             ------------
 149          uint8 spi_mosi(uint8 dat)
 150          {
 151   1          SPDAT = dat;          //DATA寄存器赋值
 152   1          while (!(SPSTAT & 0x80));     //查询完成标志
 153   1          SPSTAT = 0xc0;                  //清中断标志
 154   1        return SPDAT;
 155   1      }
 156          
 157          
 158          //--------------------------------------------------------------------------------------------------------
             ------------
 159          //  @brief      spi引脚切换函数(ss引脚由软件控制)
 160          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
 161          //  @param      sck_pin     选择SCK引脚
 162          //  @param      mosi_pin    选择MOSI引脚
 163          //  @param      miso_pin    选择MISO引脚
 164          //  Sample usage:       spi_change_pin(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14); 
 165          //                //切换SPI引脚
 166          //--------------------------------------------------------------------------------------------------------
             ------------
 167          void spi_change_pin(SPIN_enum spi_n, SPI_PIN_enum sck_pin, SPI_PIN_enum mosi_pin, SPI_PIN_enum miso_pin)
 168          {
C51 COMPILER V9.60.0.0   ZF_SPI                                                            08/05/2020 22:00:18 PAGE 4   

 169   1        sck_pin = sck_pin;
 170   1        mosi_pin = mosi_pin;
 171   1        miso_pin = miso_pin;
 172   1        
 173   1          P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
 174   1        switch(spi_n)
 175   1          {
 176   2          //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
 177   2          case SPI_1:
 178   2            gpio_mode(P1_3,GPIO);
 179   2            gpio_mode(P1_4,GPIO);
 180   2            gpio_mode(P1_5,GPIO);
 181   2            gpio_pull_set(P1_3,PULLUP);
 182   2            gpio_pull_set(P1_4,NOPULL);
 183   2            gpio_pull_set(P1_5,PULLUP);
 184   2            break;
 185   2          case SPI_2:
 186   2            gpio_mode(P2_3,GPIO);
 187   2            gpio_mode(P2_4,GPIO);
 188   2            gpio_mode(P2_5,GPIO);
 189   2            gpio_pull_set(P2_3,PULLUP);
 190   2            gpio_pull_set(P2_4,NOPULL);
 191   2            gpio_pull_set(P2_5,PULLUP);
 192   2            break;
 193   2          case SPI_3:
 194   2            gpio_mode(P4_0,GPIO);
 195   2            gpio_mode(P4_1,GPIO);
 196   2            gpio_mode(P4_3,GPIO);
 197   2            gpio_pull_set(P4_0,PULLUP);
 198   2            gpio_pull_set(P4_1,NOPULL);
 199   2            gpio_pull_set(P4_3,PULLUP);
 200   2            break;
 201   2          case SPI_4:
 202   2            gpio_mode(P3_4,GPIO);
 203   2            gpio_mode(P3_3,GPIO);
 204   2            gpio_mode(P3_2,GPIO);
 205   2            gpio_pull_set(P3_4,PULLUP);
 206   2            gpio_pull_set(P3_3,NOPULL);
 207   2            gpio_pull_set(P3_2,PULLUP);
 208   2            break;
 209   2          }
 210   1      
 211   1          switch(spi_n)
 212   1          {
 213   2          case SPI_1:
 214   2              P_SW1 |= (0x00<<2);
 215   2              break;
 216   2          case SPI_2:
 217   2              P_SW1 |= (0x01<<2);
 218   2              break;
 219   2          case SPI_3:
 220   2              P_SW1 |= (0x02<<2);
 221   2              break;
 222   2          case SPI_4:
 223   2              P_SW1 |= (0x03<<2);
 224   2              break;
 225   2          }
 226   1      }
 227          
 228          
 229          
 230          //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   ZF_SPI                                                            08/05/2020 22:00:18 PAGE 5   

             ------------
 231          //  @brief      spi模式切换函数
 232          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
 233          //  Sample usage:       
 234          //--------------------------------------------------------------------------------------------------------
             ------------
 235          void spi_change_mode(uint8 mode)
 236          {
 237   1        SPCTL &= 0xF7;    //清除SPI极性和相位
 238   1        switch(mode)
 239   1        {
 240   2        case 0:
 241   2          
 242   2          break;
 243   2        case 1:
 244   2          SPCTL |= 0x01<<2;
 245   2          break;
 246   2        case 2:
 247   2          SPCTL |= 0x02<<2;
 248   2          break;
 249   2        case 3:
 250   2          SPCTL |= 0x03<<2;
 251   2          break;
 252   2        }
 253   1      }
 254          
 255          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
